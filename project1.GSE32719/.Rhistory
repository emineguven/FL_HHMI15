}
apply( ex, 2, mean) / scale
apply( ex, 2, median) /scale
boxplot( ex )
Study the structure of gset
#```{r, comment=NA}
str(gset)
#gset@phenoData@data
experimental_design = gset@phenoData@data
experimental_design[1:3,]
# gset@phenoData@varMetadata
# experimental_design[, "source_name_ch1"][1:10]
experimental_design[1:3,  c("title", "source_name_ch1")]
unique( experimental_design$source_name_ch1 )
#```
#Load NCBI platform annotation
#```{r, message=FALSE}
gpl <- annotation(gset)
platf <- getGEO(gpl, AnnotGPL=TRUE)
ncbifd <- data.frame(attr(dataTable(platf), "table"))
#```
#Regression for age-dependent changes
#```{r}
sample.names = unique(experimental_design$source_name_ch1)
mylevels = c(1,2,3)
names(mylevels) = sample.names
gset.levels = mylevels[ experimental_design$source_name_ch1 ]
my.pvalues = numeric(length=length(ex[,1]))
# x2 = foreach(i=1:(3*2), .combine='cbind') %dopar% sqrt(i)
registerDoMC(cores=4)
#my.pvalues = foreach( i = 1:100, .combine='rbind') %dopar% {
my.pvalues = foreach( i = 1:length(ex[,1]), .combine='rbind') %dopar% {
m = lm( ex[i,] ~ gset.levels )
sm = summary(m)
pf(sm$fstatistic[1], sm$fstatistic[2], sm$fstatistic[3], lower.tail = FALSE)
}
rm(list=ls())
setwd("~/github/FL_HHMI15/project1.GSE32719")
library(Biobase)
library(GEOquery)
library(limma)
library(foreach)
library(doMC)
#load platform data from bioconductor
#http://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE32719
#GPL570	[HG-U133_Plus_2] Affymetrix Human Genome U133 Plus 2.0 Array
#https://bioconductor.org/packages/release/data/annotation/html/hgu133plus2.db.html
#Load series and platform data from GEO
# gset <- getGEO("GSE32719", GSEMatrix =TRUE)
gset <- getGEO(filename="GSE32719_series_matrix.txt.gz")
# make proper column names to match toptable
# fvarLabels(gset) <- make.names(fvarLabels(gset))
#Check exression levels. I need to normalize them. !!!!
ex= exprs(gset)
apply( ex, 2, median)
means = apply( ex, 2, mean)
means
boxplot( ex )
#Normalize them by total intensity
scale = max(means)
for(i in 1:length(ex[1,])){
ex[,i] = ex[,i] * scale/ means[i]
}
apply( ex, 2, mean) / scale
apply( ex, 2, median) /scale
boxplot( ex )
Study the structure of gset
#```{r, comment=NA}
str(gset)
#gset@phenoData@data
experimental_design = gset@phenoData@data
experimental_design[1:3,]
# gset@phenoData@varMetadata
# experimental_design[, "source_name_ch1"][1:10]
experimental_design[1:3,  c("title", "source_name_ch1")]
unique( experimental_design$source_name_ch1 )
#```
#Load NCBI platform annotation
#```{r, message=FALSE}
gpl <- annotation(gset)
platf <- getGEO(gpl, AnnotGPL=TRUE)
ncbifd <- data.frame(attr(dataTable(platf), "table"))
#```
#Regression for age-dependent changes
#```{r}
sample.names = unique(experimental_design$source_name_ch1)
mylevels = c(1,2,3)
names(mylevels) = sample.names
gset.levels = mylevels[ experimental_design$source_name_ch1 ]
my.pvalues = numeric(length=length(ex[,1]))
# x2 = foreach(i=1:(3*2), .combine='cbind') %dopar% sqrt(i)
registerDoMC(cores=4)
#my.pvalues = foreach( i = 1:100, .combine='rbind') %dopar% {
my.pvalues = foreach( i = 1:length(ex[,1]), .combine='rbind') %dopar% {
m = lm( ex[i,] ~ gset.levels )
sm = summary(m)
pf(sm$fstatistic[1], sm$fstatistic[2], sm$fstatistic[3], lower.tail = FALSE)
}
row.names(my.pvalues) = row.names(gset@assayData$exprs)
#```
#Find signicant p-values
#```{r}
hist(my.pvalues)
summary(my.pvalues)
my.pvalues.BH = p.adjust(my.pvalues, "BH")
names(my.pvalues.BH) = row.names(gset@assayData$exprs)
hist(my.pvalues.BH)
summary(my.pvalues.BH)
sig= my.pvalues.BH[my.pvalues.BH < 0.05]
sig= data.frame(sig)
sig$ID = row.names(sig)
#ncbifd[ match(names(sig), as.character( ncbifd$ID) ),  ]
sig2 = merge(sig, ncbifd, by="ID")
#```
#GO analysis
#```{r}
sig.genes = unique(sig2$Gene.symbol)
#sig.geneIDs = unique(sig2$Gene.ID)
write.table(sig.genes, "__sig.genes.tsv", sep="\t", quote=F, row.names=F, col.names=F  )
background.genes = unique( ncbifd$Gene.symbol)
write.table(background.genes, "__background.genes.tsv", sep="\t", quote=F, row.names=F, col.names=F  )
#library(topGO)
#```
##GOrilla show
#Todo: Load bioconductor annotation
#```{r, message=FALSE }
# source("https://bioconductor.org/biocLite.R")
# biocLite("hgu133plus2.db")
# library("hgu133plus2.db")
# help(package="hgu133plus2.db")
# ls("package:hgu133plus2.db")
# x <- hgu133plus2GENENAME
# x <- hgu133plus2SYMBOL
# mapped_probes <- mappedkeys(x)
# xx <- as.list(x[mapped_probes])
# xx[1:5]
#```
gset
?exprs()
ex
names(ex)
labels(ex)
dim(ex)
?apply()
x <- cbind(x1 = 3, x2 = c(4:1, 2:5))
dimnames(x)[[1]] <- letters[1:8]
apply(x, 2, mean, trim = .2)
x
x <- cbind(x1 = 3, x2 = c(4:1, 2:5))
x
x <- cbind(x1 = 3, x2 = c(4:1, 2:5))
dimnames(x)[[1]] <- letters[1:8]
apply(x, 2, mean, trim = .2)
apply(x,2,mean)
mean(x)
apply(x)
apply(x,2)
apply(x, 2, sum)
x
mean(x)
apply(x,2,mean)
apply(x,2,sd)
apply(x,1,sd)
apply(x,2,sd)
means
boxplot(ex)
# 2013 Dec 9, using results from _3b.2013Dec9.summarizeFitting.H2O2LOH.R
# 2013Nov25, use summarized results from _3.*R, which contains standard deviations.
# 2008 CLS data uses M14, 2013H2O2 uses SGU57, so only 10 strains overlaps
# Use 2013 fitting results and gnls reults
# 2013Nov14, use correlated regression
# Reverse L0 axis in plot, 2012 July 30
# 2012Feb25, Tg.vs.Tc ~ ln(R0) + G
# Partial correlations are all negative, what does this mean? Of couse, they should be negative correlations.
# Tg/Tc is a measure of ability to maintian recombiation rate during aging
rm( list = ls() );
setwd("~/github/LOH_H2O2_2016/analysis")
###############
#Load 2013 H2O2-LOH results
list.files(pattern="csv", path='output')
tb2 = read.csv("output/LOHH2O2_averaged20131210_v1.csv")
##### #Load previous LOH-CLS results, Qin Plos One 2008
# tb = read.table("summary.new.by.strain.csv", header=T, sep="\t");
tb = read.table("021307.summary.by.strain.csv", header=T, sep="\t");
tb.old = tb;
labels = names( tb.old );
tb = tb.old[, c("strain","ARLS","R0","G","CLS","Tc", "Tg","Tmmax","Tbmax", "Td", "Tdmax","TLmax","Lmax",
"b.max", "b.min", "strains", "L0.all", "L0.small" , "Pbt0","Pb0.5t0", "Pbt0.b") ];
tb$CLS.vs.Tc = tb$CLS / tb$Tc;
tb$Tg.vs.Tc = tb$Tg / tb$Tc;
tb$strain = as.character(tb$strain)
tb.old = tb;
tb = tb.old[1:13,] #remove rad52DD
tb.test = tb[1:11,]
summary(lm(Tg.vs.Tc ~ ARLS, data=tb.test)) #re-run the old results, just to double-check
plot( tb.test$Tg.vs.Tc ~ tb.test$ARLS )
text(tb.test$ARLS, tb.test$Tg.vs.Tc, tb.test$strains)
summary(lm( 1/Tg.vs.Tc ~ ARLS, data=tb.test)) #good, negative, p=0.012
###############
#load exg06 data
nat = read.table("062705.rls.cls.tab", sep="\t", header=T, colClasses=c("character", rep(NA,4)) );
###### merge tb and tb2
tb2$strain = tb2$strains
#tb3a = merge(tb, tb2, by='strain', all=T)
tb3 = merge(tb, tb2, by='strain')
tb3 = tb3[ , -(grep('strains', names(tb3))) ]
#remove BY4743, will increae p-value
#tb3 = tb3[ tb3$strain != "BY4743", ]
summary(lm(tb3$Cv.vs.Cb ~ tb3$ARLS)) #p 0.078
summary(lm(tb3$Cb.vs.Cv ~ tb3$ARLS)) #p 0.039
#summary(lm(  tb3$ARLS ~ tb3$CvManu * tb3$CbManu ))
### regression analysis
pTb = 1: length(tb3[1,])
names(pTb) = names(tb3)
for( j in c(2:41) ) {
#m = lm( tb3a[, j] ~ tb3a$ARLS, na.rm=T)
m = lm( tb3[, j] ~ tb3$Cb.vs.Cv, na.rm=T)
#m = lm( tb3a[, j] ~ tb3a$CvMean, na.rm=T)
#m = lm( tb3a[, j] ~ tb3a$CbMean, na.rm=T)
sm = summary(m)
pTb[j] = 1 - pf(sm$fsta[1], sm$fsta[2], sm$fsta[3])
}
pTb[pTb<0.05]
#ARLS       L0.all    CLS.vs.Tc        CvSTD     bminH2O2     bmaxH2O2     Cv.vs.Cb Cv.vs.Cb.STD     Cb.vs.Cv
#0.0392109400 0.0078946548 0.0354310798 0.0757766416 0.0139759187 0.0047376191 0.0001815387 0.0362846069 0.0000000000
pTb = 1: length(tb3[1,])
names(pTb) = names(tb3)
for( j in c(2:41) ) {
#m = lm( tb3a[, j] ~ tb3a$ARLS, na.rm=T)
m = lm( tb3[, j] ~ tb3$Cb0.5.vs.Cv, na.rm=T)
#m = lm( tb3a[, j] ~ tb3a$CvMean, na.rm=T)
#m = lm( tb3a[, j] ~ tb3a$CbMean, na.rm=T)
sm = summary(m)
pTb[j] = 1 - pf(sm$fsta[1], sm$fsta[2], sm$fsta[3])
}
pTb[pTb<0.1]
pTb2 = 1: length(tb3[1,])
names(pTb2) = names(tb3)
for( j in c(2:38) ) {
m = lm( tb3[, j] ~ ( tb3$Cb0.5Mean), na.rm=T)
#m = lm( tb3a[, j] ~ tb3a$CvMean, na.rm=T)
#m = lm( tb3a[, j] ~ tb3a$CbMean, na.rm=T)
sm = summary(m)
pTb2[j] = 1 - pf(sm$fsta[1], sm$fsta[2], sm$fsta[3])
}
pTb2[pTb2<0.05]
# CvManu    CvManuSTD       CvMean        CvSTD       CbMean        CbSTD     Cv.vs.Cb Cv.vs.Cb.STD    Cb0.5Mean
# 0.0050616007 0.0005836548 0.0074151552 0.0007418509 0.0002412994 0.0035395976 0.0057037439 0.0002793327 0.0000000000
pTb2 = 1: length(tb3[1,])
names(pTb2) = names(tb3)
for( j in c(2:38) ) {
m = lm( tb3[, j] ~ ( tb3$CbManu), na.rm=T)
#m = lm( tb3a[, j] ~ tb3a$CvMean, na.rm=T)
#m = lm( tb3a[, j] ~ tb3a$CbMean, na.rm=T)
sm = summary(m)
pTb2[j] = 1 - pf(sm$fsta[1], sm$fsta[2], sm$fsta[3])
}
pTb2[pTb2<0.075]
# L0.small     CvMean     CbManu     CbMean
# 0.01231221 0.03964427 0.00000000 0.03873183
pTb2 = 1: length(tb3[1,])
names(pTb2) = names(tb3)
for( j in c(2:41) ) {
m = lm( tb3[, j] ~ ( tb3$CvMean), na.rm=T)
#m = lm( tb3a[, j] ~ tb3a$CvMean, na.rm=T)
#m = lm( tb3a[, j] ~ tb3a$CbMean, na.rm=T)
sm = summary(m)
pTb2[j] = 1 - pf(sm$fsta[1], sm$fsta[2], sm$fsta[3])
}
pTb2[pTb2<0.075]
### side by side bar-plots of Tg/Tc Cb/Cv
mystep=0.2
my.breaks = seq( 0.2,  round(max( c( tb3$Cb.vs.Cv, tb3$Tg.vs.Tc )) + 0.2, 1) ,by= mystep );
# my.breaks3 = seq( 0.1,  round(max( c( tb3$Cb.vs.Cv, tb$Tg.vs.Tc ) + 0.1, 1)) ,by= mystep );
h.H2O2  <- hist( tb3$Cb.vs.Cv, br= my.breaks, xlab = "Cb/Cv", ylab = "relative density", freq=F ) ;
# h.H2O2  <- hist( tb3$Cb.vs.Cv, br= 10, xlab = "Cb/Cv", ylab = "relative density", freq=F ) ;
h.aging <- hist(tb$Tg.vs.Tc, br= my.breaks, xlab = "Tg/Tc",  ylab = "relative density", freq=F ) ;
#generate the comparison table
bins <-  data.frame( rbind(h.H2O2$density,h.aging$density) )  ;
# bins3 <-  data.frame( rbind(h.H2O2$density,h.aging$density, h.H2O2Mean$density) )  ;
my.mids = my.breaks[-length(my.breaks)] + mystep/2
#my.mids
names( bins ) <- my.mids
row.names(bins) <- c( "H2O2", "Chronological Aging" )
# row.names(bins3) <- c( "H2O2", "Chronological Aging", "H2O2 Mean" )
bins
# bins3
#pdf("plots/Figure_sideBYside20131209.pdf", width=8, height=5)
tiff("plots/Figure_sideBYside20131209.tif", width=480, height=480)
barplot( as.matrix(bins), beside=T, col=c("black","gray"), ylab="Relative Frequency", xlab="Ratios",
legend= c( "Cb/Cv H2O2", "Tg/Tc CLS" )  );
title(main="H2O2 and CLS trigger LOH at different modes" )
dev.off();
ks.test(tb3$Cb.vs.Cv, tb3$Tg.vs.Tc) #p=0.031
tiff("plots/ARLS-CbCv-20131209.tif",width=480,height=480)
par(font=2)
plot( tb3$ARLS ~ tb3$Cb.vs.Cv , pch=19, col="red", main="H2O2-LOH ~ ARLS, 20131209", ylim=c(22,38), xlim=c(0.1, 2.5)
, ylab='ARLS',xlab='Cb/Cv Tolerance to H2O2-induced genomic instability')
text( tb3$Cb.vs.Cv+0.08, tb3$ARLS+0.5, tb3$strain)
m = lm(tb3$ARLS ~ tb3$Cb.vs.Cv  )
abline( m, col="blue")
summary(m)
text(1.75, 28,  "R2=0.36 p=0.039")
dev.off()
tiff("plots/L0-CbCv-20131209.tif",width=480,height=480)
par(font=2)
plot( tb3$L0.all ~tb3$Cb.vs.Cv , pch=19, col="red", main="H2O2-LOH ~ mitotic asymmetry, 20131209"
,xlim=c(0.1,2.5),ylim=c(0.28, 0.05)
, ylab='L0.all mitotic asymmetry',xlab='Cb/Cv Tolerance to H2O2-induced genomic instability')
text( tb3$Cb.vs.Cv+0.15, tb3$L0.all+0.001,tb3$strain)
m = lm( tb3$L0.all ~ tb3$Cb.vs.Cv  )
abline( m, col="blue")
summary(m)
text(0.8, 0.25, "R2=0.56 p=0.008",font=4)
dev.off()
### Cv/Cb or Cb/Cv ~ robustness? I need a positive proxy
#summary(lm( tb3$Cv.vs.Cb ~ tb3$G ) )  #positive, p=0.20,
#summary(lm( tb3$Cb.vs.Cv ~ tb3$G ) )  #negative, p=0.25
#pdf(paste("plots/Overlayed scatter plot of Cb~Cv and Tg~Tc.pdf"), width=5, height=5)
tiff("plots/Scatterplot of Cb.vs.Cv and Tg.vs.Tc ratio.tif",width=480,height=480)
par(font=2)
plot(tb3$Cb.vs.Cv ~tb3$Tg.vs.Tc, pch=19,col="red", main='Cb/Cv vs Tg/Tc scatter plot'
,ylab='Tg/Tc',xlab='Cb/Cv', cex.lab=1.2, font.lab=2,
xlim=c(0.5,2),ylim=c(0.1,2.0))
abline(h=1,v=1)
title("Cb/Cv vs Tg/Tc scatter plot", line = 3)
text( tb3$Tg.vs.Tc+0.04,tb3$Cb.vs.Cv+0.09,  tb3$strain,cex=1)
dev.off()
tiff("plots/Histogram plot of Cb.vs.Cv and Tg.vs.Tc.tif",width=480,height=480)
par(font=2)
ratio_Cb.vs.Cv_Tg.vs.Tc<- tb3$Cb.vs.Cv/tb3$Tg.vs.Tc
hist(ratio_Cb.vs.Cv_Tg.vs.Tc,breaks=7,freq=7,xlim=c(0,2),ylim=c(0,5),c="gray")
box()
#Load 2013 H2O2-LOH results
list.files(pattern="csv", path='old')
tbRaw = read.csv("old/_ctl.tb_out.20130529.csv")
Cb.vs.Cv_p.value<-lm(tbRaw$Cb~tbRaw$Cv)
#set.seed(1234)
#dat <- data.frame(cond = factor(rep(c("Cb~Cv","Tg~Tc","Cb~Cv/Tg~Tc"), each=12)),
#values = c(tb3$Cb.vs.Cv,tb3$Tg.vs.Tc,r))
#library(ggplot2)
# Interleaved histograms
#ggplot(dat, aes(x=values, fill=cond)) +geom_histogram(binwidth=.3, position="dodge")
dev.off()
#quit("yes")
### END
####
par(font=2)
plot( tb3$L0.all ~tb3$Cb.vs.Cv , pch=19, col="red", main="H2O2-LOH ~ mitotic asymmetry, 20131209"
,xlim=c(0.1,2.5),ylim=c(0.28, 0.05)
, ylab='L0.all mitotic asymmetry',xlab='Cb/Cv Tolerance to H2O2-induced genomic instability')
text( tb3$Cb.vs.Cv+0.15, tb3$L0.all+0.001,tb3$strain)
m = lm( tb3$L0.all ~ tb3$Cb.vs.Cv  )
abline( m, col="blue")
summary(m)
text(0.8, 0.25, "R2=0.56 p=0.008",font=4)
par(font=2)
plot( tb3$L0.all ~tb3$Cb.vs.Cv , pch=19, col="red", main="H2O2-LOH ~ mitotic asymmetry, 20131209"
,xlim=c(0.1,2.5),ylim=c(0.28, 0.05)
, ylab='L0.all mitotic asymmetry',xlab='Cb/Cv Tolerance to H2O2-induced genomic instability')
text( tb3$Cb.vs.Cv+0.15, tb3$L0.all+0.1,tb3$strain)
m = lm( tb3$L0.all ~ tb3$Cb.vs.Cv  )
abline( m, col="blue")
summary(m)
text(0.8, 0.25, "R2=0.56 p=0.008",font=4)
par(font=2)
plot( tb3$L0.all ~tb3$Cb.vs.Cv , pch=19, col="red", main="H2O2-LOH ~ mitotic asymmetry, 20131209"
,xlim=c(0.1,2.5),ylim=c(0.28, 0.05)
, ylab='L0.all mitotic asymmetry',xlab='Cb/Cv Tolerance to H2O2-induced genomic instability')
text( tb3$Cb.vs.Cv+0.15, tb3$L0.all+0.09,tb3$strain)
m = lm( tb3$L0.all ~ tb3$Cb.vs.Cv  )
abline( m, col="blue")
summary(m)
text(0.8, 0.25, "R2=0.56 p=0.008",font=4)
par(font=2)
plot( tb3$L0.all ~tb3$Cb.vs.Cv , pch=19, col="red", main="H2O2-LOH ~ mitotic asymmetry, 20131209"
,xlim=c(0.1,2.5),ylim=c(0.28, 0.05)
, ylab='L0.all mitotic asymmetry',xlab='Cb/Cv Tolerance to H2O2-induced genomic instability')
text( tb3$Cb.vs.Cv+0.15, tb3$L0.all+0.009,tb3$strain)
m = lm( tb3$L0.all ~ tb3$Cb.vs.Cv  )
abline( m, col="blue")
summary(m)
text(0.8, 0.25, "R2=0.56 p=0.008",font=4)
tb3$strain
par(font=2)
plot( tb3$L0.all ~tb3$Cb.vs.Cv , pch=19, col="red", main="H2O2-LOH ~ mitotic asymmetry, 20131209"
,xlim=c(0.1,2.5),ylim=c(0.28, 0.05)
, ylab='L0.all mitotic asymmetry',xlab='Cb/Cv Tolerance to H2O2-induced genomic instability')
m = lm( tb3$L0.all ~ tb3$Cb.vs.Cv  )
abline( m, col="blue")
summary(m)
text(0.8, 0.25, "R2=0.56 p=0.008",font=4)
par(font=2)
plot( tb3$L0.all ~tb3$Cb.vs.Cv , pch=19, col="red", main="H2O2-LOH ~ mitotic asymmetry, 20131209"
,xlim=c(0.1,2.5),ylim=c(0.28, 0.05)
, ylab='L0.all mitotic asymmetry',xlab='Cb/Cv Tolerance to H2O2-induced genomic instability')
text( tb3$Cb.vs.Cv+0.15, tb3$L0.all+0.009,tb3$strain)
m = lm( tb3$L0.all ~ tb3$Cb.vs.Cv  )
abline( m, col="blue")
summary(m)
text(0.8, 0.25, "R2=0.56 p=0.008",font=4)
par(font=2)
plot( tb3$Cb.vs.Cv~ tb3$L0.all, pch=19, col="red", main="H2O2-LOH ~ mitotic asymmetry, 20131209"
,ylim=c(0.1,2.5),xlim=c(0.28, 0.05)
, ylab='L0.all mitotic asymmetry',xlab='Cb/Cv Tolerance to H2O2-induced genomic instability')
m = lm( tb3$Cb.vs.Cv ~ tb3$L0.all )
abline( m, col="blue")
summary(m)
text(0.8, 0.25, "R2=0.56 p=0.008",font=4)
rm(list=ls())
setwd("~/github/FL_HHMI15/project1.GSE32719")
library(Biobase)
library(GEOquery)
library(limma)
library(foreach)
library(doMC)
#load platform data from bioconductor
#http://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE32719
#GPL570	[HG-U133_Plus_2] Affymetrix Human Genome U133 Plus 2.0 Array
#https://bioconductor.org/packages/release/data/annotation/html/hgu133plus2.db.html
#Load series and platform data from GEO
# gset <- getGEO("GSE32719", GSEMatrix =TRUE)
gset <- getGEO(filename="GSE32719_series_matrix.txt.gz")
# make proper column names to match toptable
# fvarLabels(gset) <- make.names(fvarLabels(gset))
#Check exression levels. I need to normalize them. !!!!
ex= exprs(gset)
apply( ex, 2, median)
means = apply( ex, 2, mean)
means
boxplot( ex )
#Normalize them by total intensity
scale = max(means)
for(i in 1:length(ex[1,])){
ex[,i] = ex[,i] * scale/ means[i]
}
apply( ex, 2, mean) / scale
apply( ex, 2, median) /scale
boxplot( ex )
Study the structure of gset
#```{r, comment=NA}
str(gset)
#gset@phenoData@data
experimental_design = gset@phenoData@data
experimental_design[1:3,]
# gset@phenoData@varMetadata
# experimental_design[, "source_name_ch1"][1:10]
experimental_design[1:3,  c("title", "source_name_ch1")]
unique( experimental_design$source_name_ch1 )
#```
#Load NCBI platform annotation
#```{r, message=FALSE}
gpl <- annotation(gset)
platf <- getGEO(gpl, AnnotGPL=TRUE)
ncbifd <- data.frame(attr(dataTable(platf), "table"))
#```
#Regression for age-dependent changes
#```{r}
sample.names = unique(experimental_design$source_name_ch1)
mylevels = c(1,2,3)
names(mylevels) = sample.names
gset.levels = mylevels[ experimental_design$source_name_ch1 ]
my.pvalues = numeric(length=length(ex[,1]))
# x2 = foreach(i=1:(3*2), .combine='cbind') %dopar% sqrt(i)
registerDoMC(cores=4)
#my.pvalues = foreach( i = 1:100, .combine='rbind') %dopar% {
my.pvalues = foreach( i = 1:length(ex[,1]), .combine='rbind') %dopar% {
m = lm( ex[i,] ~ gset.levels )
sm = summary(m)
pf(sm$fstatistic[1], sm$fstatistic[2], sm$fstatistic[3], lower.tail = FALSE)
}
row.names(my.pvalues) = row.names(gset@assayData$exprs)
#```
#Find signicant p-values
#```{r}
hist(my.pvalues)
summary(my.pvalues)
my.pvalues.BH = p.adjust(my.pvalues, "BH")
names(my.pvalues.BH) = row.names(gset@assayData$exprs)
hist(my.pvalues.BH)
summary(my.pvalues.BH)
sig= my.pvalues.BH[my.pvalues.BH < 0.05]
sig= data.frame(sig)
sig$ID = row.names(sig)
#ncbifd[ match(names(sig), as.character( ncbifd$ID) ),  ]
sig2 = merge(sig, ncbifd, by="ID")
#```
#GO analysis
#```{r}
sig.genes = unique(sig2$Gene.symbol)
#sig.geneIDs = unique(sig2$Gene.ID)
write.table(sig.genes, "__sig.genes.tsv", sep="\t", quote=F, row.names=F, col.names=F  )
background.genes = unique( ncbifd$Gene.symbol)
write.table(background.genes, "__background.genes.tsv", sep="\t", quote=F, row.names=F, col.names=F  )
#library(topGO)
#```
##GOrilla show
#Todo: Load bioconductor annotation
#```{r, message=FALSE }
# source("https://bioconductor.org/biocLite.R")
# biocLite("hgu133plus2.db")
# library("hgu133plus2.db")
# help(package="hgu133plus2.db")
# ls("package:hgu133plus2.db")
# x <- hgu133plus2GENENAME
# x <- hgu133plus2SYMBOL
# mapped_probes <- mappedkeys(x)
# xx <- as.list(x[mapped_probes])
# xx[1:5]
#```
ex
labels(ex)
